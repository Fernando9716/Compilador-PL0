
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASIGNA BEGIN CALL COMA COMENTARIO CONST DIVIDE DO END IF IMPAR MULTIPLICA NUMERO PROCEDURE PUNTO_Y_COMA RESTA SUMA THEN UPDATE VAR VARIABLE WHILEprogram : blockblock : constDecl varDecl procDecl statementconstDecl : CONST constAssignmentList PUNTO_Y_COMA constDecl : emptyconstAssignmentList : VARIABLE ASIGNA NUMEROconstAssignmentList : constAssignmentList COMA VARIABLE ASIGNA NUMEROvarDecl : VAR identList PUNTO_Y_COMAvarDecl : emptyidentList : VARIABLEidentList : identList COMA VARIABLEprocDecl : procDecl PROCEDURE VARIABLE PUNTO_Y_COMA block PUNTO_Y_COMAprocDecl : emptystatement : VARIABLE UPDATE expressionstatement : CALL VARIABLEstatement : BEGIN statementList ENDstatement : IF condition THEN statementstatement : WHILE condition DO statementstatement : emptystatementList : statementstatementList : statementList PUNTO_Y_COMA statementcondition : IMPAR expressioncondition : expression relation expressionrelation : ASIGNAexpression : termexpression : addingOperator termexpression : expression addingOperator termaddingOperator : SUMAaddingOperator : RESTAterm : factorterm : term multiplyingOperator factormultiplyingOperator : MULTIPLICAmultiplyingOperator : DIVIDEfactor : VARIABLEfactor : NUMEROempty :'
    
_lr_action_items = {'CONST':([0,48,],[4,4,]),'VAR':([0,3,5,15,48,],[-35,7,-4,-3,-35,]),'PROCEDURE':([0,3,5,6,8,11,12,15,26,48,70,],[-35,-35,-4,-35,-8,19,-12,-3,-7,-35,-11,]),'VARIABLE':([0,3,4,5,6,7,8,11,12,15,16,19,21,22,23,24,26,27,31,36,39,41,42,48,51,52,54,55,56,57,58,59,61,70,],[-35,-35,10,-4,-35,14,-8,20,-12,-3,28,30,32,20,43,43,-7,46,43,43,43,-27,-28,-35,20,20,43,43,-23,43,-31,-32,20,-11,]),'CALL':([0,3,5,6,8,11,12,15,22,26,48,51,52,61,70,],[-35,-35,-4,-35,-8,21,-12,-3,21,-7,-35,21,21,21,-11,]),'BEGIN':([0,3,5,6,8,11,12,15,22,26,48,51,52,61,70,],[-35,-35,-4,-35,-8,22,-12,-3,22,-7,-35,22,22,22,-11,]),'IF':([0,3,5,6,8,11,12,15,22,26,48,51,52,61,70,],[-35,-35,-4,-35,-8,23,-12,-3,23,-7,-35,23,23,23,-11,]),'WHILE':([0,3,5,6,8,11,12,15,22,26,48,51,52,61,70,],[-35,-35,-4,-35,-8,24,-12,-3,24,-7,-35,24,24,24,-11,]),'$end':([0,1,2,3,5,6,8,11,12,15,18,25,26,32,38,40,43,44,49,50,52,60,61,65,67,68,69,70,],[-35,0,-1,-35,-4,-35,-8,-35,-12,-3,-2,-18,-7,-14,-24,-29,-33,-34,-13,-15,-35,-25,-35,-16,-26,-30,-17,-11,]),'PUNTO_Y_COMA':([3,5,6,8,9,11,12,13,14,15,18,22,25,26,29,30,32,33,34,38,40,43,44,46,48,49,50,51,52,60,61,62,63,64,65,67,68,69,70,],[-35,-4,-35,-8,15,-35,-12,26,-9,-3,-2,-35,-18,-7,-5,48,-14,51,-19,-24,-29,-33,-34,-10,-35,-13,-15,-35,-35,-25,-35,-6,70,-20,-16,-26,-30,-17,-11,]),'COMA':([9,13,14,29,46,62,],[16,27,-9,-5,-10,-6,]),'ASIGNA':([10,28,37,38,40,43,44,60,67,68,],[17,47,56,-24,-29,-33,-34,-25,-26,-30,]),'NUMERO':([17,23,24,31,36,39,41,42,47,54,55,56,57,58,59,],[29,44,44,44,44,44,-27,-28,62,44,44,-23,44,-31,-32,]),'UPDATE':([20,],[31,]),'END':([22,25,32,33,34,38,40,43,44,49,50,51,52,60,61,64,65,67,68,69,],[-35,-18,-14,50,-19,-24,-29,-33,-34,-13,-15,-35,-35,-25,-35,-20,-16,-26,-30,-17,]),'IMPAR':([23,24,],[36,36,]),'SUMA':([23,24,31,36,37,38,40,43,44,49,53,54,56,60,66,67,68,],[41,41,41,41,41,-24,-29,-33,-34,41,41,41,-23,-25,41,-26,-30,]),'RESTA':([23,24,31,36,37,38,40,43,44,49,53,54,56,60,66,67,68,],[42,42,42,42,42,-24,-29,-33,-34,42,42,42,-23,-25,42,-26,-30,]),'THEN':([35,38,40,43,44,53,60,66,67,68,],[52,-24,-29,-33,-34,-21,-25,-22,-26,-30,]),'DO':([38,40,43,44,45,53,60,66,67,68,],[-24,-29,-33,-34,61,-21,-25,-22,-26,-30,]),'MULTIPLICA':([38,40,43,44,60,67,68,],[58,-29,-33,-34,58,58,-30,]),'DIVIDE':([38,40,43,44,60,67,68,],[59,-29,-33,-34,59,59,-30,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([0,48,],[2,63,]),'constDecl':([0,48,],[3,3,]),'empty':([0,3,6,11,22,48,51,52,61,],[5,8,12,25,25,5,25,25,25,]),'varDecl':([3,],[6,]),'constAssignmentList':([4,],[9,]),'procDecl':([6,],[11,]),'identList':([7,],[13,]),'statement':([11,22,51,52,61,],[18,34,64,65,69,]),'statementList':([22,],[33,]),'condition':([23,24,],[35,45,]),'expression':([23,24,31,36,54,],[37,37,49,53,66,]),'term':([23,24,31,36,39,54,55,],[38,38,38,38,60,38,67,]),'addingOperator':([23,24,31,36,37,49,53,54,66,],[39,39,39,39,55,55,55,39,55,]),'factor':([23,24,31,36,39,54,55,57,],[40,40,40,40,40,40,40,68,]),'relation':([37,],[54,]),'multiplyingOperator':([38,60,67,],[57,57,57,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block','program',1,'p_program','AnalizadorSintactico.py',24),
  ('block -> constDecl varDecl procDecl statement','block',4,'p_block','AnalizadorSintactico.py',30),
  ('constDecl -> CONST constAssignmentList PUNTO_Y_COMA','constDecl',3,'p_constDecl','AnalizadorSintactico.py',35),
  ('constDecl -> empty','constDecl',1,'p_constDeclEmpty','AnalizadorSintactico.py',42),
  ('constAssignmentList -> VARIABLE ASIGNA NUMERO','constAssignmentList',3,'p_constAssignmentList1','AnalizadorSintactico.py',48),
  ('constAssignmentList -> constAssignmentList COMA VARIABLE ASIGNA NUMERO','constAssignmentList',5,'p_constAssignmentList2','AnalizadorSintactico.py',54),
  ('varDecl -> VAR identList PUNTO_Y_COMA','varDecl',3,'p_varDecl1','AnalizadorSintactico.py',60),
  ('varDecl -> empty','varDecl',1,'p_varDeclEmpty','AnalizadorSintactico.py',66),
  ('identList -> VARIABLE','identList',1,'p_identList1','AnalizadorSintactico.py',72),
  ('identList -> identList COMA VARIABLE','identList',3,'p_identList2','AnalizadorSintactico.py',78),
  ('procDecl -> procDecl PROCEDURE VARIABLE PUNTO_Y_COMA block PUNTO_Y_COMA','procDecl',6,'p_procDecl1','AnalizadorSintactico.py',84),
  ('procDecl -> empty','procDecl',1,'p_procEmpty','AnalizadorSintactico.py',89),
  ('statement -> VARIABLE UPDATE expression','statement',3,'p_statement1','AnalizadorSintactico.py',94),
  ('statement -> CALL VARIABLE','statement',2,'p_statement2','AnalizadorSintactico.py',99),
  ('statement -> BEGIN statementList END','statement',3,'p_statement3','AnalizadorSintactico.py',105),
  ('statement -> IF condition THEN statement','statement',4,'p_statement4','AnalizadorSintactico.py',110),
  ('statement -> WHILE condition DO statement','statement',4,'p_statement5','AnalizadorSintactico.py',116),
  ('statement -> empty','statement',1,'p_statementEmpty','AnalizadorSintactico.py',122),
  ('statementList -> statement','statementList',1,'p_statementList1','AnalizadorSintactico.py',128),
  ('statementList -> statementList PUNTO_Y_COMA statement','statementList',3,'p_statementList2','AnalizadorSintactico.py',134),
  ('condition -> IMPAR expression','condition',2,'p_condition1','AnalizadorSintactico.py',140),
  ('condition -> expression relation expression','condition',3,'p_condition2','AnalizadorSintactico.py',146),
  ('relation -> ASIGNA','relation',1,'p_relation1','AnalizadorSintactico.py',152),
  ('expression -> term','expression',1,'p_expression1','AnalizadorSintactico.py',158),
  ('expression -> addingOperator term','expression',2,'p_expression2','AnalizadorSintactico.py',164),
  ('expression -> expression addingOperator term','expression',3,'p_expression3','AnalizadorSintactico.py',170),
  ('addingOperator -> SUMA','addingOperator',1,'p_addingOperator1','AnalizadorSintactico.py',176),
  ('addingOperator -> RESTA','addingOperator',1,'p_addingOperator2','AnalizadorSintactico.py',182),
  ('term -> factor','term',1,'p_term1','AnalizadorSintactico.py',188),
  ('term -> term multiplyingOperator factor','term',3,'p_term2','AnalizadorSintactico.py',193),
  ('multiplyingOperator -> MULTIPLICA','multiplyingOperator',1,'p_multiplyingOperator1','AnalizadorSintactico.py',199),
  ('multiplyingOperator -> DIVIDE','multiplyingOperator',1,'p_multiplyingOperator2','AnalizadorSintactico.py',205),
  ('factor -> VARIABLE','factor',1,'p_factor1','AnalizadorSintactico.py',211),
  ('factor -> NUMERO','factor',1,'p_factor2','AnalizadorSintactico.py',218),
  ('empty -> <empty>','empty',0,'p_empty','AnalizadorSintactico.py',225),
]
