Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMENTARIO

Grammar

Rule 0     S' -> program
Rule 1     program -> block
Rule 2     block -> constDecl varDecl procDecl statement
Rule 3     constDecl -> CONST constAssignmentList PUNTO_Y_COMA
Rule 4     constDecl -> empty
Rule 5     constAssignmentList -> VARIABLE ASIGNA NUMERO
Rule 6     constAssignmentList -> constAssignmentList COMA VARIABLE ASIGNA NUMERO
Rule 7     varDecl -> VAR identList PUNTO_Y_COMA
Rule 8     varDecl -> empty
Rule 9     identList -> VARIABLE
Rule 10    identList -> identList COMA VARIABLE
Rule 11    procDecl -> procDecl PROCEDURE VARIABLE PUNTO_Y_COMA block PUNTO_Y_COMA
Rule 12    procDecl -> empty
Rule 13    statement -> VARIABLE UPDATE expression
Rule 14    statement -> CALL VARIABLE
Rule 15    statement -> BEGIN statementList END
Rule 16    statement -> IF condition THEN statement
Rule 17    statement -> WHILE condition DO statement
Rule 18    statement -> empty
Rule 19    statementList -> statement
Rule 20    statementList -> statementList PUNTO_Y_COMA statement
Rule 21    condition -> IMPAR expression
Rule 22    condition -> expression relation expression
Rule 23    relation -> ASIGNA
Rule 24    expression -> term
Rule 25    expression -> addingOperator term
Rule 26    expression -> expression addingOperator term
Rule 27    addingOperator -> SUMA
Rule 28    addingOperator -> RESTA
Rule 29    term -> factor
Rule 30    term -> term multiplyingOperator factor
Rule 31    multiplyingOperator -> MULTIPLICA
Rule 32    multiplyingOperator -> DIVIDE
Rule 33    factor -> VARIABLE
Rule 34    factor -> NUMERO
Rule 35    empty -> <empty>

Terminals, with rules where they appear

ASIGNA               : 5 6 23
BEGIN                : 15
CALL                 : 14
COMA                 : 6 10
COMENTARIO           : 
CONST                : 3
DIVIDE               : 32
DO                   : 17
END                  : 15
IF                   : 16
IMPAR                : 21
MULTIPLICA           : 31
NUMERO               : 5 6 34
PROCEDURE            : 11
PUNTO_Y_COMA         : 3 7 11 11 20
RESTA                : 28
SUMA                 : 27
THEN                 : 16
UPDATE               : 13
VAR                  : 7
VARIABLE             : 5 6 9 10 11 13 14 33
WHILE                : 17
error                : 

Nonterminals, with rules where they appear

addingOperator       : 25 26
block                : 1 11
condition            : 16 17
constAssignmentList  : 3 6
constDecl            : 2
empty                : 4 8 12 18
expression           : 13 21 22 22 26
factor               : 29 30
identList            : 7 10
multiplyingOperator  : 30
procDecl             : 2 11
program              : 0
relation             : 22
statement            : 2 16 17 19 20
statementList        : 15 20
term                 : 24 25 26 30
varDecl              : 2

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . block
    (2) block -> . constDecl varDecl procDecl statement
    (3) constDecl -> . CONST constAssignmentList PUNTO_Y_COMA
    (4) constDecl -> . empty
    (35) empty -> .

    CONST           shift and go to state 4
    VAR             reduce using rule 35 (empty -> .)
    PROCEDURE       reduce using rule 35 (empty -> .)
    VARIABLE        reduce using rule 35 (empty -> .)
    CALL            reduce using rule 35 (empty -> .)
    BEGIN           reduce using rule 35 (empty -> .)
    IF              reduce using rule 35 (empty -> .)
    WHILE           reduce using rule 35 (empty -> .)
    $end            reduce using rule 35 (empty -> .)

    program                        shift and go to state 1
    block                          shift and go to state 2
    constDecl                      shift and go to state 3
    empty                          shift and go to state 5

state 1

    (0) S' -> program .



state 2

    (1) program -> block .

    $end            reduce using rule 1 (program -> block .)


state 3

    (2) block -> constDecl . varDecl procDecl statement
    (7) varDecl -> . VAR identList PUNTO_Y_COMA
    (8) varDecl -> . empty
    (35) empty -> .

    VAR             shift and go to state 7
    PROCEDURE       reduce using rule 35 (empty -> .)
    VARIABLE        reduce using rule 35 (empty -> .)
    CALL            reduce using rule 35 (empty -> .)
    BEGIN           reduce using rule 35 (empty -> .)
    IF              reduce using rule 35 (empty -> .)
    WHILE           reduce using rule 35 (empty -> .)
    $end            reduce using rule 35 (empty -> .)
    PUNTO_Y_COMA    reduce using rule 35 (empty -> .)

    varDecl                        shift and go to state 6
    empty                          shift and go to state 8

state 4

    (3) constDecl -> CONST . constAssignmentList PUNTO_Y_COMA
    (5) constAssignmentList -> . VARIABLE ASIGNA NUMERO
    (6) constAssignmentList -> . constAssignmentList COMA VARIABLE ASIGNA NUMERO

    VARIABLE        shift and go to state 10

    constAssignmentList            shift and go to state 9

state 5

    (4) constDecl -> empty .

    VAR             reduce using rule 4 (constDecl -> empty .)
    PROCEDURE       reduce using rule 4 (constDecl -> empty .)
    VARIABLE        reduce using rule 4 (constDecl -> empty .)
    CALL            reduce using rule 4 (constDecl -> empty .)
    BEGIN           reduce using rule 4 (constDecl -> empty .)
    IF              reduce using rule 4 (constDecl -> empty .)
    WHILE           reduce using rule 4 (constDecl -> empty .)
    $end            reduce using rule 4 (constDecl -> empty .)
    PUNTO_Y_COMA    reduce using rule 4 (constDecl -> empty .)


state 6

    (2) block -> constDecl varDecl . procDecl statement
    (11) procDecl -> . procDecl PROCEDURE VARIABLE PUNTO_Y_COMA block PUNTO_Y_COMA
    (12) procDecl -> . empty
    (35) empty -> .

    PROCEDURE       reduce using rule 35 (empty -> .)
    VARIABLE        reduce using rule 35 (empty -> .)
    CALL            reduce using rule 35 (empty -> .)
    BEGIN           reduce using rule 35 (empty -> .)
    IF              reduce using rule 35 (empty -> .)
    WHILE           reduce using rule 35 (empty -> .)
    $end            reduce using rule 35 (empty -> .)
    PUNTO_Y_COMA    reduce using rule 35 (empty -> .)

    procDecl                       shift and go to state 11
    empty                          shift and go to state 12

state 7

    (7) varDecl -> VAR . identList PUNTO_Y_COMA
    (9) identList -> . VARIABLE
    (10) identList -> . identList COMA VARIABLE

    VARIABLE        shift and go to state 14

    identList                      shift and go to state 13

state 8

    (8) varDecl -> empty .

    PROCEDURE       reduce using rule 8 (varDecl -> empty .)
    VARIABLE        reduce using rule 8 (varDecl -> empty .)
    CALL            reduce using rule 8 (varDecl -> empty .)
    BEGIN           reduce using rule 8 (varDecl -> empty .)
    IF              reduce using rule 8 (varDecl -> empty .)
    WHILE           reduce using rule 8 (varDecl -> empty .)
    $end            reduce using rule 8 (varDecl -> empty .)
    PUNTO_Y_COMA    reduce using rule 8 (varDecl -> empty .)


state 9

    (3) constDecl -> CONST constAssignmentList . PUNTO_Y_COMA
    (6) constAssignmentList -> constAssignmentList . COMA VARIABLE ASIGNA NUMERO

    PUNTO_Y_COMA    shift and go to state 15
    COMA            shift and go to state 16


state 10

    (5) constAssignmentList -> VARIABLE . ASIGNA NUMERO

    ASIGNA          shift and go to state 17


state 11

    (2) block -> constDecl varDecl procDecl . statement
    (11) procDecl -> procDecl . PROCEDURE VARIABLE PUNTO_Y_COMA block PUNTO_Y_COMA
    (13) statement -> . VARIABLE UPDATE expression
    (14) statement -> . CALL VARIABLE
    (15) statement -> . BEGIN statementList END
    (16) statement -> . IF condition THEN statement
    (17) statement -> . WHILE condition DO statement
    (18) statement -> . empty
    (35) empty -> .

    PROCEDURE       shift and go to state 19
    VARIABLE        shift and go to state 20
    CALL            shift and go to state 21
    BEGIN           shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    $end            reduce using rule 35 (empty -> .)
    PUNTO_Y_COMA    reduce using rule 35 (empty -> .)

    statement                      shift and go to state 18
    empty                          shift and go to state 25

state 12

    (12) procDecl -> empty .

    PROCEDURE       reduce using rule 12 (procDecl -> empty .)
    VARIABLE        reduce using rule 12 (procDecl -> empty .)
    CALL            reduce using rule 12 (procDecl -> empty .)
    BEGIN           reduce using rule 12 (procDecl -> empty .)
    IF              reduce using rule 12 (procDecl -> empty .)
    WHILE           reduce using rule 12 (procDecl -> empty .)
    $end            reduce using rule 12 (procDecl -> empty .)
    PUNTO_Y_COMA    reduce using rule 12 (procDecl -> empty .)


state 13

    (7) varDecl -> VAR identList . PUNTO_Y_COMA
    (10) identList -> identList . COMA VARIABLE

    PUNTO_Y_COMA    shift and go to state 26
    COMA            shift and go to state 27


state 14

    (9) identList -> VARIABLE .

    PUNTO_Y_COMA    reduce using rule 9 (identList -> VARIABLE .)
    COMA            reduce using rule 9 (identList -> VARIABLE .)


state 15

    (3) constDecl -> CONST constAssignmentList PUNTO_Y_COMA .

    VAR             reduce using rule 3 (constDecl -> CONST constAssignmentList PUNTO_Y_COMA .)
    PROCEDURE       reduce using rule 3 (constDecl -> CONST constAssignmentList PUNTO_Y_COMA .)
    VARIABLE        reduce using rule 3 (constDecl -> CONST constAssignmentList PUNTO_Y_COMA .)
    CALL            reduce using rule 3 (constDecl -> CONST constAssignmentList PUNTO_Y_COMA .)
    BEGIN           reduce using rule 3 (constDecl -> CONST constAssignmentList PUNTO_Y_COMA .)
    IF              reduce using rule 3 (constDecl -> CONST constAssignmentList PUNTO_Y_COMA .)
    WHILE           reduce using rule 3 (constDecl -> CONST constAssignmentList PUNTO_Y_COMA .)
    $end            reduce using rule 3 (constDecl -> CONST constAssignmentList PUNTO_Y_COMA .)
    PUNTO_Y_COMA    reduce using rule 3 (constDecl -> CONST constAssignmentList PUNTO_Y_COMA .)


state 16

    (6) constAssignmentList -> constAssignmentList COMA . VARIABLE ASIGNA NUMERO

    VARIABLE        shift and go to state 28


state 17

    (5) constAssignmentList -> VARIABLE ASIGNA . NUMERO

    NUMERO          shift and go to state 29


state 18

    (2) block -> constDecl varDecl procDecl statement .

    $end            reduce using rule 2 (block -> constDecl varDecl procDecl statement .)
    PUNTO_Y_COMA    reduce using rule 2 (block -> constDecl varDecl procDecl statement .)


state 19

    (11) procDecl -> procDecl PROCEDURE . VARIABLE PUNTO_Y_COMA block PUNTO_Y_COMA

    VARIABLE        shift and go to state 30


state 20

    (13) statement -> VARIABLE . UPDATE expression

    UPDATE          shift and go to state 31


state 21

    (14) statement -> CALL . VARIABLE

    VARIABLE        shift and go to state 32


state 22

    (15) statement -> BEGIN . statementList END
    (19) statementList -> . statement
    (20) statementList -> . statementList PUNTO_Y_COMA statement
    (13) statement -> . VARIABLE UPDATE expression
    (14) statement -> . CALL VARIABLE
    (15) statement -> . BEGIN statementList END
    (16) statement -> . IF condition THEN statement
    (17) statement -> . WHILE condition DO statement
    (18) statement -> . empty
    (35) empty -> .

    VARIABLE        shift and go to state 20
    CALL            shift and go to state 21
    BEGIN           shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    END             reduce using rule 35 (empty -> .)
    PUNTO_Y_COMA    reduce using rule 35 (empty -> .)

    statementList                  shift and go to state 33
    statement                      shift and go to state 34
    empty                          shift and go to state 25

state 23

    (16) statement -> IF . condition THEN statement
    (21) condition -> . IMPAR expression
    (22) condition -> . expression relation expression
    (24) expression -> . term
    (25) expression -> . addingOperator term
    (26) expression -> . expression addingOperator term
    (29) term -> . factor
    (30) term -> . term multiplyingOperator factor
    (27) addingOperator -> . SUMA
    (28) addingOperator -> . RESTA
    (33) factor -> . VARIABLE
    (34) factor -> . NUMERO

    IMPAR           shift and go to state 36
    SUMA            shift and go to state 41
    RESTA           shift and go to state 42
    VARIABLE        shift and go to state 43
    NUMERO          shift and go to state 44

    condition                      shift and go to state 35
    expression                     shift and go to state 37
    term                           shift and go to state 38
    addingOperator                 shift and go to state 39
    factor                         shift and go to state 40

state 24

    (17) statement -> WHILE . condition DO statement
    (21) condition -> . IMPAR expression
    (22) condition -> . expression relation expression
    (24) expression -> . term
    (25) expression -> . addingOperator term
    (26) expression -> . expression addingOperator term
    (29) term -> . factor
    (30) term -> . term multiplyingOperator factor
    (27) addingOperator -> . SUMA
    (28) addingOperator -> . RESTA
    (33) factor -> . VARIABLE
    (34) factor -> . NUMERO

    IMPAR           shift and go to state 36
    SUMA            shift and go to state 41
    RESTA           shift and go to state 42
    VARIABLE        shift and go to state 43
    NUMERO          shift and go to state 44

    condition                      shift and go to state 45
    expression                     shift and go to state 37
    term                           shift and go to state 38
    addingOperator                 shift and go to state 39
    factor                         shift and go to state 40

state 25

    (18) statement -> empty .

    $end            reduce using rule 18 (statement -> empty .)
    PUNTO_Y_COMA    reduce using rule 18 (statement -> empty .)
    END             reduce using rule 18 (statement -> empty .)


state 26

    (7) varDecl -> VAR identList PUNTO_Y_COMA .

    PROCEDURE       reduce using rule 7 (varDecl -> VAR identList PUNTO_Y_COMA .)
    VARIABLE        reduce using rule 7 (varDecl -> VAR identList PUNTO_Y_COMA .)
    CALL            reduce using rule 7 (varDecl -> VAR identList PUNTO_Y_COMA .)
    BEGIN           reduce using rule 7 (varDecl -> VAR identList PUNTO_Y_COMA .)
    IF              reduce using rule 7 (varDecl -> VAR identList PUNTO_Y_COMA .)
    WHILE           reduce using rule 7 (varDecl -> VAR identList PUNTO_Y_COMA .)
    $end            reduce using rule 7 (varDecl -> VAR identList PUNTO_Y_COMA .)
    PUNTO_Y_COMA    reduce using rule 7 (varDecl -> VAR identList PUNTO_Y_COMA .)


state 27

    (10) identList -> identList COMA . VARIABLE

    VARIABLE        shift and go to state 46


state 28

    (6) constAssignmentList -> constAssignmentList COMA VARIABLE . ASIGNA NUMERO

    ASIGNA          shift and go to state 47


state 29

    (5) constAssignmentList -> VARIABLE ASIGNA NUMERO .

    PUNTO_Y_COMA    reduce using rule 5 (constAssignmentList -> VARIABLE ASIGNA NUMERO .)
    COMA            reduce using rule 5 (constAssignmentList -> VARIABLE ASIGNA NUMERO .)


state 30

    (11) procDecl -> procDecl PROCEDURE VARIABLE . PUNTO_Y_COMA block PUNTO_Y_COMA

    PUNTO_Y_COMA    shift and go to state 48


state 31

    (13) statement -> VARIABLE UPDATE . expression
    (24) expression -> . term
    (25) expression -> . addingOperator term
    (26) expression -> . expression addingOperator term
    (29) term -> . factor
    (30) term -> . term multiplyingOperator factor
    (27) addingOperator -> . SUMA
    (28) addingOperator -> . RESTA
    (33) factor -> . VARIABLE
    (34) factor -> . NUMERO

    SUMA            shift and go to state 41
    RESTA           shift and go to state 42
    VARIABLE        shift and go to state 43
    NUMERO          shift and go to state 44

    expression                     shift and go to state 49
    term                           shift and go to state 38
    addingOperator                 shift and go to state 39
    factor                         shift and go to state 40

state 32

    (14) statement -> CALL VARIABLE .

    $end            reduce using rule 14 (statement -> CALL VARIABLE .)
    PUNTO_Y_COMA    reduce using rule 14 (statement -> CALL VARIABLE .)
    END             reduce using rule 14 (statement -> CALL VARIABLE .)


state 33

    (15) statement -> BEGIN statementList . END
    (20) statementList -> statementList . PUNTO_Y_COMA statement

    END             shift and go to state 50
    PUNTO_Y_COMA    shift and go to state 51


state 34

    (19) statementList -> statement .

    END             reduce using rule 19 (statementList -> statement .)
    PUNTO_Y_COMA    reduce using rule 19 (statementList -> statement .)


state 35

    (16) statement -> IF condition . THEN statement

    THEN            shift and go to state 52


state 36

    (21) condition -> IMPAR . expression
    (24) expression -> . term
    (25) expression -> . addingOperator term
    (26) expression -> . expression addingOperator term
    (29) term -> . factor
    (30) term -> . term multiplyingOperator factor
    (27) addingOperator -> . SUMA
    (28) addingOperator -> . RESTA
    (33) factor -> . VARIABLE
    (34) factor -> . NUMERO

    SUMA            shift and go to state 41
    RESTA           shift and go to state 42
    VARIABLE        shift and go to state 43
    NUMERO          shift and go to state 44

    expression                     shift and go to state 53
    term                           shift and go to state 38
    addingOperator                 shift and go to state 39
    factor                         shift and go to state 40

state 37

    (22) condition -> expression . relation expression
    (26) expression -> expression . addingOperator term
    (23) relation -> . ASIGNA
    (27) addingOperator -> . SUMA
    (28) addingOperator -> . RESTA

    ASIGNA          shift and go to state 56
    SUMA            shift and go to state 41
    RESTA           shift and go to state 42

    relation                       shift and go to state 54
    addingOperator                 shift and go to state 55

state 38

    (24) expression -> term .
    (30) term -> term . multiplyingOperator factor
    (31) multiplyingOperator -> . MULTIPLICA
    (32) multiplyingOperator -> . DIVIDE

    ASIGNA          reduce using rule 24 (expression -> term .)
    SUMA            reduce using rule 24 (expression -> term .)
    RESTA           reduce using rule 24 (expression -> term .)
    $end            reduce using rule 24 (expression -> term .)
    PUNTO_Y_COMA    reduce using rule 24 (expression -> term .)
    END             reduce using rule 24 (expression -> term .)
    THEN            reduce using rule 24 (expression -> term .)
    DO              reduce using rule 24 (expression -> term .)
    MULTIPLICA      shift and go to state 58
    DIVIDE          shift and go to state 59

    multiplyingOperator            shift and go to state 57

state 39

    (25) expression -> addingOperator . term
    (29) term -> . factor
    (30) term -> . term multiplyingOperator factor
    (33) factor -> . VARIABLE
    (34) factor -> . NUMERO

    VARIABLE        shift and go to state 43
    NUMERO          shift and go to state 44

    term                           shift and go to state 60
    factor                         shift and go to state 40

state 40

    (29) term -> factor .

    MULTIPLICA      reduce using rule 29 (term -> factor .)
    DIVIDE          reduce using rule 29 (term -> factor .)
    ASIGNA          reduce using rule 29 (term -> factor .)
    SUMA            reduce using rule 29 (term -> factor .)
    RESTA           reduce using rule 29 (term -> factor .)
    $end            reduce using rule 29 (term -> factor .)
    PUNTO_Y_COMA    reduce using rule 29 (term -> factor .)
    END             reduce using rule 29 (term -> factor .)
    THEN            reduce using rule 29 (term -> factor .)
    DO              reduce using rule 29 (term -> factor .)


state 41

    (27) addingOperator -> SUMA .

    VARIABLE        reduce using rule 27 (addingOperator -> SUMA .)
    NUMERO          reduce using rule 27 (addingOperator -> SUMA .)


state 42

    (28) addingOperator -> RESTA .

    VARIABLE        reduce using rule 28 (addingOperator -> RESTA .)
    NUMERO          reduce using rule 28 (addingOperator -> RESTA .)


state 43

    (33) factor -> VARIABLE .

    MULTIPLICA      reduce using rule 33 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 33 (factor -> VARIABLE .)
    ASIGNA          reduce using rule 33 (factor -> VARIABLE .)
    SUMA            reduce using rule 33 (factor -> VARIABLE .)
    RESTA           reduce using rule 33 (factor -> VARIABLE .)
    $end            reduce using rule 33 (factor -> VARIABLE .)
    PUNTO_Y_COMA    reduce using rule 33 (factor -> VARIABLE .)
    END             reduce using rule 33 (factor -> VARIABLE .)
    THEN            reduce using rule 33 (factor -> VARIABLE .)
    DO              reduce using rule 33 (factor -> VARIABLE .)


state 44

    (34) factor -> NUMERO .

    MULTIPLICA      reduce using rule 34 (factor -> NUMERO .)
    DIVIDE          reduce using rule 34 (factor -> NUMERO .)
    ASIGNA          reduce using rule 34 (factor -> NUMERO .)
    SUMA            reduce using rule 34 (factor -> NUMERO .)
    RESTA           reduce using rule 34 (factor -> NUMERO .)
    $end            reduce using rule 34 (factor -> NUMERO .)
    PUNTO_Y_COMA    reduce using rule 34 (factor -> NUMERO .)
    END             reduce using rule 34 (factor -> NUMERO .)
    THEN            reduce using rule 34 (factor -> NUMERO .)
    DO              reduce using rule 34 (factor -> NUMERO .)


state 45

    (17) statement -> WHILE condition . DO statement

    DO              shift and go to state 61


state 46

    (10) identList -> identList COMA VARIABLE .

    PUNTO_Y_COMA    reduce using rule 10 (identList -> identList COMA VARIABLE .)
    COMA            reduce using rule 10 (identList -> identList COMA VARIABLE .)


state 47

    (6) constAssignmentList -> constAssignmentList COMA VARIABLE ASIGNA . NUMERO

    NUMERO          shift and go to state 62


state 48

    (11) procDecl -> procDecl PROCEDURE VARIABLE PUNTO_Y_COMA . block PUNTO_Y_COMA
    (2) block -> . constDecl varDecl procDecl statement
    (3) constDecl -> . CONST constAssignmentList PUNTO_Y_COMA
    (4) constDecl -> . empty
    (35) empty -> .

    CONST           shift and go to state 4
    VAR             reduce using rule 35 (empty -> .)
    PROCEDURE       reduce using rule 35 (empty -> .)
    VARIABLE        reduce using rule 35 (empty -> .)
    CALL            reduce using rule 35 (empty -> .)
    BEGIN           reduce using rule 35 (empty -> .)
    IF              reduce using rule 35 (empty -> .)
    WHILE           reduce using rule 35 (empty -> .)
    PUNTO_Y_COMA    reduce using rule 35 (empty -> .)

    block                          shift and go to state 63
    constDecl                      shift and go to state 3
    empty                          shift and go to state 5

state 49

    (13) statement -> VARIABLE UPDATE expression .
    (26) expression -> expression . addingOperator term
    (27) addingOperator -> . SUMA
    (28) addingOperator -> . RESTA

    $end            reduce using rule 13 (statement -> VARIABLE UPDATE expression .)
    PUNTO_Y_COMA    reduce using rule 13 (statement -> VARIABLE UPDATE expression .)
    END             reduce using rule 13 (statement -> VARIABLE UPDATE expression .)
    SUMA            shift and go to state 41
    RESTA           shift and go to state 42

    addingOperator                 shift and go to state 55

state 50

    (15) statement -> BEGIN statementList END .

    $end            reduce using rule 15 (statement -> BEGIN statementList END .)
    PUNTO_Y_COMA    reduce using rule 15 (statement -> BEGIN statementList END .)
    END             reduce using rule 15 (statement -> BEGIN statementList END .)


state 51

    (20) statementList -> statementList PUNTO_Y_COMA . statement
    (13) statement -> . VARIABLE UPDATE expression
    (14) statement -> . CALL VARIABLE
    (15) statement -> . BEGIN statementList END
    (16) statement -> . IF condition THEN statement
    (17) statement -> . WHILE condition DO statement
    (18) statement -> . empty
    (35) empty -> .

    VARIABLE        shift and go to state 20
    CALL            shift and go to state 21
    BEGIN           shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    END             reduce using rule 35 (empty -> .)
    PUNTO_Y_COMA    reduce using rule 35 (empty -> .)

    statement                      shift and go to state 64
    empty                          shift and go to state 25

state 52

    (16) statement -> IF condition THEN . statement
    (13) statement -> . VARIABLE UPDATE expression
    (14) statement -> . CALL VARIABLE
    (15) statement -> . BEGIN statementList END
    (16) statement -> . IF condition THEN statement
    (17) statement -> . WHILE condition DO statement
    (18) statement -> . empty
    (35) empty -> .

    VARIABLE        shift and go to state 20
    CALL            shift and go to state 21
    BEGIN           shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    $end            reduce using rule 35 (empty -> .)
    PUNTO_Y_COMA    reduce using rule 35 (empty -> .)
    END             reduce using rule 35 (empty -> .)

    statement                      shift and go to state 65
    empty                          shift and go to state 25

state 53

    (21) condition -> IMPAR expression .
    (26) expression -> expression . addingOperator term
    (27) addingOperator -> . SUMA
    (28) addingOperator -> . RESTA

    THEN            reduce using rule 21 (condition -> IMPAR expression .)
    DO              reduce using rule 21 (condition -> IMPAR expression .)
    SUMA            shift and go to state 41
    RESTA           shift and go to state 42

    addingOperator                 shift and go to state 55

state 54

    (22) condition -> expression relation . expression
    (24) expression -> . term
    (25) expression -> . addingOperator term
    (26) expression -> . expression addingOperator term
    (29) term -> . factor
    (30) term -> . term multiplyingOperator factor
    (27) addingOperator -> . SUMA
    (28) addingOperator -> . RESTA
    (33) factor -> . VARIABLE
    (34) factor -> . NUMERO

    SUMA            shift and go to state 41
    RESTA           shift and go to state 42
    VARIABLE        shift and go to state 43
    NUMERO          shift and go to state 44

    expression                     shift and go to state 66
    term                           shift and go to state 38
    addingOperator                 shift and go to state 39
    factor                         shift and go to state 40

state 55

    (26) expression -> expression addingOperator . term
    (29) term -> . factor
    (30) term -> . term multiplyingOperator factor
    (33) factor -> . VARIABLE
    (34) factor -> . NUMERO

    VARIABLE        shift and go to state 43
    NUMERO          shift and go to state 44

    term                           shift and go to state 67
    factor                         shift and go to state 40

state 56

    (23) relation -> ASIGNA .

    SUMA            reduce using rule 23 (relation -> ASIGNA .)
    RESTA           reduce using rule 23 (relation -> ASIGNA .)
    VARIABLE        reduce using rule 23 (relation -> ASIGNA .)
    NUMERO          reduce using rule 23 (relation -> ASIGNA .)


state 57

    (30) term -> term multiplyingOperator . factor
    (33) factor -> . VARIABLE
    (34) factor -> . NUMERO

    VARIABLE        shift and go to state 43
    NUMERO          shift and go to state 44

    factor                         shift and go to state 68

state 58

    (31) multiplyingOperator -> MULTIPLICA .

    VARIABLE        reduce using rule 31 (multiplyingOperator -> MULTIPLICA .)
    NUMERO          reduce using rule 31 (multiplyingOperator -> MULTIPLICA .)


state 59

    (32) multiplyingOperator -> DIVIDE .

    VARIABLE        reduce using rule 32 (multiplyingOperator -> DIVIDE .)
    NUMERO          reduce using rule 32 (multiplyingOperator -> DIVIDE .)


state 60

    (25) expression -> addingOperator term .
    (30) term -> term . multiplyingOperator factor
    (31) multiplyingOperator -> . MULTIPLICA
    (32) multiplyingOperator -> . DIVIDE

    ASIGNA          reduce using rule 25 (expression -> addingOperator term .)
    SUMA            reduce using rule 25 (expression -> addingOperator term .)
    RESTA           reduce using rule 25 (expression -> addingOperator term .)
    $end            reduce using rule 25 (expression -> addingOperator term .)
    PUNTO_Y_COMA    reduce using rule 25 (expression -> addingOperator term .)
    END             reduce using rule 25 (expression -> addingOperator term .)
    THEN            reduce using rule 25 (expression -> addingOperator term .)
    DO              reduce using rule 25 (expression -> addingOperator term .)
    MULTIPLICA      shift and go to state 58
    DIVIDE          shift and go to state 59

    multiplyingOperator            shift and go to state 57

state 61

    (17) statement -> WHILE condition DO . statement
    (13) statement -> . VARIABLE UPDATE expression
    (14) statement -> . CALL VARIABLE
    (15) statement -> . BEGIN statementList END
    (16) statement -> . IF condition THEN statement
    (17) statement -> . WHILE condition DO statement
    (18) statement -> . empty
    (35) empty -> .

    VARIABLE        shift and go to state 20
    CALL            shift and go to state 21
    BEGIN           shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    $end            reduce using rule 35 (empty -> .)
    PUNTO_Y_COMA    reduce using rule 35 (empty -> .)
    END             reduce using rule 35 (empty -> .)

    statement                      shift and go to state 69
    empty                          shift and go to state 25

state 62

    (6) constAssignmentList -> constAssignmentList COMA VARIABLE ASIGNA NUMERO .

    PUNTO_Y_COMA    reduce using rule 6 (constAssignmentList -> constAssignmentList COMA VARIABLE ASIGNA NUMERO .)
    COMA            reduce using rule 6 (constAssignmentList -> constAssignmentList COMA VARIABLE ASIGNA NUMERO .)


state 63

    (11) procDecl -> procDecl PROCEDURE VARIABLE PUNTO_Y_COMA block . PUNTO_Y_COMA

    PUNTO_Y_COMA    shift and go to state 70


state 64

    (20) statementList -> statementList PUNTO_Y_COMA statement .

    END             reduce using rule 20 (statementList -> statementList PUNTO_Y_COMA statement .)
    PUNTO_Y_COMA    reduce using rule 20 (statementList -> statementList PUNTO_Y_COMA statement .)


state 65

    (16) statement -> IF condition THEN statement .

    $end            reduce using rule 16 (statement -> IF condition THEN statement .)
    PUNTO_Y_COMA    reduce using rule 16 (statement -> IF condition THEN statement .)
    END             reduce using rule 16 (statement -> IF condition THEN statement .)


state 66

    (22) condition -> expression relation expression .
    (26) expression -> expression . addingOperator term
    (27) addingOperator -> . SUMA
    (28) addingOperator -> . RESTA

    THEN            reduce using rule 22 (condition -> expression relation expression .)
    DO              reduce using rule 22 (condition -> expression relation expression .)
    SUMA            shift and go to state 41
    RESTA           shift and go to state 42

    addingOperator                 shift and go to state 55

state 67

    (26) expression -> expression addingOperator term .
    (30) term -> term . multiplyingOperator factor
    (31) multiplyingOperator -> . MULTIPLICA
    (32) multiplyingOperator -> . DIVIDE

    ASIGNA          reduce using rule 26 (expression -> expression addingOperator term .)
    SUMA            reduce using rule 26 (expression -> expression addingOperator term .)
    RESTA           reduce using rule 26 (expression -> expression addingOperator term .)
    $end            reduce using rule 26 (expression -> expression addingOperator term .)
    PUNTO_Y_COMA    reduce using rule 26 (expression -> expression addingOperator term .)
    END             reduce using rule 26 (expression -> expression addingOperator term .)
    THEN            reduce using rule 26 (expression -> expression addingOperator term .)
    DO              reduce using rule 26 (expression -> expression addingOperator term .)
    MULTIPLICA      shift and go to state 58
    DIVIDE          shift and go to state 59

    multiplyingOperator            shift and go to state 57

state 68

    (30) term -> term multiplyingOperator factor .

    MULTIPLICA      reduce using rule 30 (term -> term multiplyingOperator factor .)
    DIVIDE          reduce using rule 30 (term -> term multiplyingOperator factor .)
    ASIGNA          reduce using rule 30 (term -> term multiplyingOperator factor .)
    SUMA            reduce using rule 30 (term -> term multiplyingOperator factor .)
    RESTA           reduce using rule 30 (term -> term multiplyingOperator factor .)
    $end            reduce using rule 30 (term -> term multiplyingOperator factor .)
    PUNTO_Y_COMA    reduce using rule 30 (term -> term multiplyingOperator factor .)
    END             reduce using rule 30 (term -> term multiplyingOperator factor .)
    THEN            reduce using rule 30 (term -> term multiplyingOperator factor .)
    DO              reduce using rule 30 (term -> term multiplyingOperator factor .)


state 69

    (17) statement -> WHILE condition DO statement .

    $end            reduce using rule 17 (statement -> WHILE condition DO statement .)
    PUNTO_Y_COMA    reduce using rule 17 (statement -> WHILE condition DO statement .)
    END             reduce using rule 17 (statement -> WHILE condition DO statement .)


state 70

    (11) procDecl -> procDecl PROCEDURE VARIABLE PUNTO_Y_COMA block PUNTO_Y_COMA .

    PROCEDURE       reduce using rule 11 (procDecl -> procDecl PROCEDURE VARIABLE PUNTO_Y_COMA block PUNTO_Y_COMA .)
    VARIABLE        reduce using rule 11 (procDecl -> procDecl PROCEDURE VARIABLE PUNTO_Y_COMA block PUNTO_Y_COMA .)
    CALL            reduce using rule 11 (procDecl -> procDecl PROCEDURE VARIABLE PUNTO_Y_COMA block PUNTO_Y_COMA .)
    BEGIN           reduce using rule 11 (procDecl -> procDecl PROCEDURE VARIABLE PUNTO_Y_COMA block PUNTO_Y_COMA .)
    IF              reduce using rule 11 (procDecl -> procDecl PROCEDURE VARIABLE PUNTO_Y_COMA block PUNTO_Y_COMA .)
    WHILE           reduce using rule 11 (procDecl -> procDecl PROCEDURE VARIABLE PUNTO_Y_COMA block PUNTO_Y_COMA .)
    $end            reduce using rule 11 (procDecl -> procDecl PROCEDURE VARIABLE PUNTO_Y_COMA block PUNTO_Y_COMA .)
    PUNTO_Y_COMA    reduce using rule 11 (procDecl -> procDecl PROCEDURE VARIABLE PUNTO_Y_COMA block PUNTO_Y_COMA .)

